spring:
  application:
    name: bankcore-service
  
  profiles:
    active: ${SPRING_PROFILES_ACTIVE:default}
  
  datasource:
    # Multi-AZ failover ready URL (production example)
    # url: jdbc:postgresql://db-az1:5432,db-az2:5432,db-az3:5432/bankingdb?targetServerType=primary&loadBalanceHosts=true
    url: ${DB_URL:jdbc:postgresql://localhost:5432/bankingdb}
    username: ${DB_USER:postgres}
    password: ${DB_PASSWORD:changeme}
    driver-class-name: org.postgresql.Driver
    
    # HikariCP - Production-grade connection pooling
    hikari:
      # Pool sizing for high availability
      maximum-pool-size: 20          # Max connections per pod
      minimum-idle: 5                # Min idle connections
      connection-timeout: 30000      # 30s connection timeout
      idle-timeout: 600000           # 10min idle timeout
      max-lifetime: 1800000          # 30min max connection lifetime
      pool-name: bankcore-pool
      
      # Connection validation (crucial for failover)
      connection-test-query: "SELECT 1"
      validation-timeout: 5000       # 5s validation timeout
      
      # Leak detection for debugging
      leak-detection-threshold: 60000 # 1min leak detection
      
      # Auto-commit handling
      auto-commit: false
      
      # Connection properties for resilience
      connection-init-sql: "SET application_name='bankcore'"
  
  jpa:
    hibernate:
      ddl-auto: validate  # Never use 'create' or 'update' in production
    properties:
      # Global query timeout (30 seconds)
      javax.persistence.query.timeout: 30000
      
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        use_sql_comments: true
        default_schema: banking
        
        # Connection handling for transactions
        connection:
          provider_disables_autocommit: true
          handling_mode: DELAYED_ACQUISITION_AND_RELEASE_AFTER_TRANSACTION
        
        # Query timeout
        query.timeout: 30000  # 30 seconds
        
        # Performance optimizations
        jdbc:
          batch_size: 25
          batch_versioned_data: true
          fetch_size: 50
        order_inserts: true
        order_updates: true
        
        # Statistics for monitoring
        generate_statistics: true
        
        # Optimistic locking
        query.fail_on_pagination_over_collection_fetch: true
    show-sql: false
  
  flyway:
    enabled: true
    locations: classpath:db/migration
    baseline-on-migrate: true
    baseline-version: 0
    schemas: banking
  
  # Redis configuration (production-ready)
  redis:
    enabled: ${REDIS_ENABLED:false}
    host: ${REDIS_HOST:redis-cluster}
    port: ${REDIS_PORT:6379}
    password: ${REDIS_PASSWORD:}
    timeout: 2000ms
    cluster:
      nodes:
        - ${REDIS_CLUSTER_NODE1:redis-0.redis-cluster:6379}
        - ${REDIS_CLUSTER_NODE2:redis-1.redis-cluster:6379}
        - ${REDIS_CLUSTER_NODE3:redis-2.redis-cluster:6379}
      max-redirects: 3
    lettuce:
      pool:
        max-active: 20
        max-idle: 10
        min-idle: 5
        max-wait: 2000ms
  
  cache:
    type: ${CACHE_TYPE:none}  # Set to 'redis' when Redis is enabled
    redis:
      time-to-live: 300s  # 5 minutes default TTL
      cache-null-values: false
    cache-names:
      - transactions
      - accounts
      - user-sessions
  
  session:
    store-type: ${SESSION_STORE:none}  # Set to 'redis' for distributed sessions
    redis:
      namespace: banking:sessions
  
  lifecycle:
    timeout-per-shutdown-phase: 30s

server:
  port: 8080
  shutdown: graceful
  compression:
    enabled: true
    mime-types: text/html,text/xml,text/plain,text/css,text/javascript,application/javascript,application/json
    min-response-size: 1024
  
  error:
    include-message: always
    include-binding-errors: always
    include-stacktrace: on_param
    include-exception: false

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,loggers,httptrace,threaddump,heapdump,env,beans
      base-path: /actuator
  endpoint:
    health:
      probes:
        enabled: true
      show-details: always
      show-components: always
      group:
        liveness:
          include: livenessState
        readiness:
          include: readinessState,db
        startup:
          include: db
  health:
    livenessState:
      enabled: true
    readinessState:
      enabled: true
  metrics:
    distribution:
      percentiles-histogram:
        http.server.requests: true
      slo:
        http.server.requests: 50ms,100ms,200ms,400ms,800ms,1s
    tags:
      application: ${spring.application.name}
      environment: ${spring.profiles.active}
  tracing:
    sampling:
      probability: 1.0

logging:
  level:
    root: INFO
    com.bankcore: DEBUG
    org.springframework.web: INFO
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"

resilience4j:
  circuitbreaker:
    instances:
      backend:
        failure-rate-threshold: 50
        wait-duration-in-open-state: 10000
        sliding-window-size: 10
        minimum-number-of-calls: 5
        permitted-number-of-calls-in-half-open-state: 3
        automatic-transition-from-open-to-half-open-enabled: true
        event-consumer-buffer-size: 10
  ratelimiter:
    instances:
      backend:
        limit-for-period: 100
        limit-refresh-period: 1s
        timeout-duration: 0s
        event-consumer-buffer-size: 100

info:
  app:
    name: ${spring.application.name}
    description: demo Enterprise Banking Platform
    version: 2.1.0
    encoding: UTF-8
    java:
      version: ${java.version}